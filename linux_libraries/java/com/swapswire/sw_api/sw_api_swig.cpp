/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


/*****************************************************************************

   Copyright 2002-2012 MarkitSERV. All Rights Reserved.

*****************************************************************************/

#include "mw_swig_funcs.h"

using namespace mw::JNI;


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1Initialise(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  
  UTF8Ref cleanup_arg1(jenv);
  if (!cleanup_arg1 .assign(jarg1, & arg1)) return 0;
  
  arg2 = (int)jarg2; 
  result = (SW_ErrCode)SW_Initialise((char const *)arg1,arg2);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1Connect(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jobject jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  SW_SessionID *arg4 = (SW_SessionID *) 0 ;
  SW_SessionID temp4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  
  UTF8Ref cleanup_arg1(jenv);
  if (!cleanup_arg1 .assign(jarg1, & arg1)) return 0;
  
  arg2 = (int)jarg2; 
  {
    // For and old bug and compatibility with clients code we must
    // continue to accept the sessionCallback via the tag passed on
    // connect If 0, we won't reset the C callback to null to allow
    // 0 tags The tag/userdata is still going to be passed back to
    // the user as callbacks arrive.
    if (jarg3 != 0)
    {
      if (!SetSessionStateCallback(jenv, jarg3))
      return 0;
      SW_RegisterSessionStateCallback(sessionHandlerCallbackInterposer);
    }
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp4 = (SW_SessionID)0;
    arg4 = &temp4; 
  }
  result = (SW_ErrCode)SW_Connect((char const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp4;
    jenv->SetIntArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1Disconnect(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  SW_SessionID arg1 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_SessionID)jarg1; 
  result = (SW_ErrCode)SW_Disconnect(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SetApplicationInfo(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jint jresult = 0 ;
  SW_SessionID arg1 ;
  char *arg2 = (char *) 0 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_SessionID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  result = (SW_ErrCode)SW_SetApplicationInfo(arg1,(char const *)arg2);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1Login(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  SW_SessionID arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  SW_LoginID *arg4 = (SW_LoginID *) 0 ;
  SW_LoginID temp4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_SessionID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp4 = (SW_LoginID)0;
    arg4 = &temp4; 
  }
  result = (SW_ErrCode)SW_Login(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp4;
    jenv->SetIntArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1LoginOnBehalf(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jintArray jarg5) {
  jint jresult = 0 ;
  SW_SessionID arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  SW_LoginID *arg5 = (SW_LoginID *) 0 ;
  SW_LoginID temp5 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_SessionID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  {
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg5) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp5 = (SW_LoginID)0;
    arg5 = &temp5; 
  }
  result = (SW_ErrCode)SW_LoginOnBehalf(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp5;
    jenv->SetIntArrayRegion(jarg5, 0, 1, &jvalue);
  }
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1Logout(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  result = (SW_ErrCode)SW_Logout(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SetCapability(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  arg3 = (int)jarg3; 
  result = (SW_ErrCode)SW_SetCapability(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetCapabilities(JNIEnv *jenv, jclass jcls, jint jarg1, jobjectArray jarg2) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char **arg2 = (char **) 0 ;
  MWString resultWrapper2 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  if (!CheckStringOutputArray(jenv, jarg2))
  return 0;
  arg2 = resultWrapper2;
  
  result = (SW_ErrCode)SW_GetCapabilities(arg1,(char const **)arg2);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg2, resultWrapper2.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1ChangePassword(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  SW_SessionID arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_SessionID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  result = (SW_ErrCode)SW_ChangePassword(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = (jint)result; 
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SetCallbackMode(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum SW_CallbackMode arg1 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum SW_CallbackMode)jarg1; 
  result = (SW_ErrCode)SW_SetCallbackMode(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1RegisterSessionStateCallback(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jint jresult = 0 ;
  SW_SessionStateCallbackPtr arg1 = (SW_SessionStateCallbackPtr) 0 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  {
    if (!SetSessionStateCallback(jenv, jarg1))
    return 0;
    arg1 = sessionHandlerCallbackInterposer;
  }
  result = (SW_ErrCode)SW_RegisterSessionStateCallback(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1RegisterDealNotifyCallback(JNIEnv *jenv, jclass jcls, jint jarg1, jobject jarg2) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  void *arg2 = (void *) 0 ;
  SW_DealNotifyCallbackPtr arg3 = (SW_DealNotifyCallbackPtr) 0 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  {
    if (!SetCallback(jenv, jarg1, &SessionCallbacks::dealCb, jarg2))
    return 0;
    if (jarg2 != 0)
    arg3 = dealHandlerCallbackInterposer;
  }
  result = (SW_ErrCode)SW_RegisterDealNotifyCallback(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1RegisterDealNotifyExCallback(JNIEnv *jenv, jclass jcls, jint jarg1, jobject jarg2) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  void *arg2 = (void *) 0 ;
  SW_DealNotifyExCallbackPtr arg3 = (SW_DealNotifyExCallbackPtr) 0 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  {
    if (!SetCallback(jenv, jarg1, &SessionCallbacks::dealExCb, jarg2))
    return 0;
    if (jarg2 != 0)
    arg3 = dealHandlerExCallbackInterposer;
  }
  result = (SW_ErrCode)SW_RegisterDealNotifyExCallback(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1RegisterBatchCallback(JNIEnv *jenv, jclass jcls, jint jarg1, jobject jarg2) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  void *arg2 = (void *) 0 ;
  SW_BatchCallbackPtr arg3 = (SW_BatchCallbackPtr) 0 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  {
    if (!SetCallback(jenv, jarg1, &SessionCallbacks::batchCb, jarg2))
    return 0;
    if (jarg2 != 0)
    arg3 = batchHandlerCallbackInterposer;
  }
  result = (SW_ErrCode)SW_RegisterBatchCallback(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1Poll(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (SW_ErrCode)SW_Poll(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetErrorDescription(JNIEnv *jenv, jclass jcls, jint jarg1, jobjectArray jarg2) {
  jint jresult = 0 ;
  SW_ErrCode arg1 ;
  char **arg2 = (char **) 0 ;
  MWString resultWrapper2 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_ErrCode)jarg1; 
  
  if (!CheckStringOutputArray(jenv, jarg2))
  return 0;
  arg2 = resultWrapper2;
  
  result = (SW_ErrCode)SW_GetErrorDescription(arg1,(char const **)arg2);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg2, resultWrapper2.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1ErrorStr(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  SW_ErrCode arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_ErrCode)jarg1; 
  result = (char *)SW_ErrorStr(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetLastErrorSpecificsEx(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jint jresult = 0 ;
  char **arg1 = (char **) 0 ;
  MWString resultWrapper1 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  
  if (!CheckStringOutputArray(jenv, jarg1))
  return 0;
  arg1 = resultWrapper1;
  
  result = (SW_ErrCode)SW_GetLastErrorSpecificsEx((char const **)arg1);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg1, resultWrapper1.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetLastErrorSpecifics(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)SW_GetLastErrorSpecifics();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetAddressList(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_GetAddressList(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetMyUserInfo(JNIEnv *jenv, jclass jcls, jint jarg1, jobjectArray jarg2) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML *arg2 = (SW_XML *) 0 ;
  MWString resultWrapper2 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  if (!CheckStringOutputArray(jenv, jarg2))
  return 0;
  arg2 = resultWrapper2;
  
  result = (SW_ErrCode)SW_GetMyUserInfo(arg1,(char const **)arg2);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg2, resultWrapper2.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetStaticData(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  SW_XML *arg4 = (SW_XML *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_GetStaticData(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealerDealStateStr(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  enum SW_DealerDealState arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum SW_DealerDealState)jarg1; 
  result = (char *)SW_DealerDealStateStr(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetBrokerIDfromSwapsWireID(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealID arg2 ;
  SW_BrokerDealID *arg3 = (SW_BrokerDealID *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  arg2 = (SW_DealID)jarg2; 
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_GetBrokerIDfromSwapsWireID(arg1,arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1BrokeredDealGetInfo(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_BrokerDealID arg2 = (SW_BrokerDealID) 0 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_BrokeredDealGetInfo(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetBrokerClearingStatus(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_GetBrokerClearingStatus(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1BrokeredDealGetXML(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jint jarg4, jobjectArray jarg5) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_BrokerDealID arg2 = (SW_BrokerDealID) 0 ;
  SW_DealMinorVersion arg3 ;
  SW_DealMajorVersion arg4 ;
  SW_XML *arg5 = (SW_XML *) 0 ;
  MWString resultWrapper5 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  arg3 = (SW_DealMinorVersion)jarg3; 
  arg4 = (SW_DealMajorVersion)jarg4; 
  
  if (!CheckStringOutputArray(jenv, jarg5))
  return 0;
  arg5 = resultWrapper5;
  
  result = (SW_ErrCode)SW_BrokeredDealGetXML(arg1,(char const *)arg2,arg3,arg4,(char const **)arg5);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg5, resultWrapper5.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1BrokeredDealGetRecipientXML(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jint jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_BrokerDealID arg2 = (SW_BrokerDealID) 0 ;
  SW_DealMinorVersion arg3 ;
  SW_DealMajorVersion arg4 ;
  SW_BrokerRecipientID arg5 = (SW_BrokerRecipientID) 0 ;
  SW_XML *arg6 = (SW_XML *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  arg3 = (SW_DealMinorVersion)jarg3; 
  arg4 = (SW_DealMajorVersion)jarg4; 
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_BrokeredDealGetRecipientXML(arg1,(char const *)arg2,arg3,arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1BrokeredDealGetPickupIdentityByRecipient(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jint jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_BrokerDealID arg2 = (SW_BrokerDealID) 0 ;
  SW_DealMinorVersion arg3 ;
  SW_DealMajorVersion arg4 ;
  SW_BrokerRecipientID arg5 = (SW_BrokerRecipientID) 0 ;
  char **arg6 = (char **) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  arg3 = (SW_DealMinorVersion)jarg3; 
  arg4 = (SW_DealMajorVersion)jarg4; 
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_BrokeredDealGetPickupIdentityByRecipient(arg1,(char const *)arg2,arg3,arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1BrokeredDealGetRejectReasonByRecipient(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jint jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_BrokerDealID arg2 = (SW_BrokerDealID) 0 ;
  SW_DealMinorVersion arg3 ;
  SW_DealMajorVersion arg4 ;
  SW_BrokerRecipientID arg5 = (SW_BrokerRecipientID) 0 ;
  char **arg6 = (char **) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  arg3 = (SW_DealMinorVersion)jarg3; 
  arg4 = (SW_DealMajorVersion)jarg4; 
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_BrokeredDealGetRejectReasonByRecipient(arg1,(char const *)arg2,arg3,arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetEndedDealInfo(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_TimeSpan arg2 ;
  SW_TimeSpan arg3 ;
  char **arg4 = (char **) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  arg2 = (SW_TimeSpan)jarg2; 
  arg3 = (SW_TimeSpan)jarg3; 
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_GetEndedDealInfo(arg1,arg2,arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetEndedDealInfoEx(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  char **arg3 = (char **) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_GetEndedDealInfoEx(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealTerminate(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_BrokerDealID arg2 = (SW_BrokerDealID) 0 ;
  SW_DealVersionHandle *arg3 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_DealTerminate(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitNewBackloadAndNovateDeal(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  char *arg5 = (char *) 0 ;
  SW_DealVersionHandle *arg6 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_SubmitNewBackloadAndNovateDeal(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitNewBrokeredDealEx(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_DealVersionHandle *arg4 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_SubmitNewBrokeredDealEx(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1ReSubmitNewBrokeredDealEx(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_DealVersionHandle *arg4 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_ReSubmitNewBrokeredDealEx(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitNewDirectDeal(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  char *arg5 = (char *) 0 ;
  SW_DealVersionHandle *arg6 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_SubmitNewDirectDeal(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitNewPrimeBrokerDeal(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  char *arg5 = (char *) 0 ;
  SW_DealVersionHandle *arg6 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_SubmitNewPrimeBrokerDeal(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitDraftNewDeal(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  char *arg5 = (char *) 0 ;
  SW_DealVersionHandle *arg6 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_SubmitDraftNewDeal(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitDraftNewPrimeBrokerDeal(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  char *arg5 = (char *) 0 ;
  SW_DealVersionHandle *arg6 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_SubmitDraftNewPrimeBrokerDeal(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitBackloadDeal(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  char *arg5 = (char *) 0 ;
  SW_DealVersionHandle *arg6 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_SubmitBackloadDeal(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitNewMatchDeal(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  char *arg5 = (char *) 0 ;
  SW_DealVersionHandle *arg6 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_SubmitNewMatchDeal(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitNewDirectDealEx(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  char *arg5 = (char *) 0 ;
  SW_DealVersionHandle *arg6 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_SubmitNewDirectDealEx(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitCancellationEx(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jint jarg7, jobjectArray jarg8) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_TimeSpan arg7 ;
  SW_DealVersionHandle *arg8 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper8 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  arg7 = (SW_TimeSpan)jarg7; 
  
  if (!CheckStringOutputArray(jenv, jarg8))
  return 0;
  arg8 = resultWrapper8;
  
  result = (SW_ErrCode)SW_SubmitCancellationEx(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,arg7,(char const **)arg8);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg8, resultWrapper8.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitCancellation(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jobjectArray jarg7) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_DealVersionHandle *arg7 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper7 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg7))
  return 0;
  arg7 = resultWrapper7;
  
  result = (SW_ErrCode)SW_SubmitCancellation(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg7, resultWrapper7.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitDraftCancellation(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jint jarg7, jobjectArray jarg8) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_TimeSpan arg7 ;
  SW_DealVersionHandle *arg8 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper8 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  arg7 = (SW_TimeSpan)jarg7; 
  
  if (!CheckStringOutputArray(jenv, jarg8))
  return 0;
  arg8 = resultWrapper8;
  
  result = (SW_ErrCode)SW_SubmitDraftCancellation(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,arg7,(char const **)arg8);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg8, resultWrapper8.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitMatchCancellationEx(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jint jarg7, jobjectArray jarg8) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_TimeSpan arg7 ;
  SW_DealVersionHandle *arg8 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper8 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  arg7 = (SW_TimeSpan)jarg7; 
  
  if (!CheckStringOutputArray(jenv, jarg8))
  return 0;
  arg8 = resultWrapper8;
  
  result = (SW_ErrCode)SW_SubmitMatchCancellationEx(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,arg7,(char const **)arg8);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg8, resultWrapper8.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitMatchCancellation(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jobjectArray jarg7) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_DealVersionHandle *arg7 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper7 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg7))
  return 0;
  arg7 = resultWrapper7;
  
  result = (SW_ErrCode)SW_SubmitMatchCancellation(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg7, resultWrapper7.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitNettingInstruction(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_SubmitNettingInstruction(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitPostTradeEvent(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jobjectArray jarg7) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_DealVersionHandle *arg7 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper7 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg7))
  return 0;
  arg7 = resultWrapper7;
  
  result = (SW_ErrCode)SW_SubmitPostTradeEvent(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg7, resultWrapper7.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitExit(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jobjectArray jarg7) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  char *arg3 = (char *) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_DealVersionHandle *arg7 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper7 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg7))
  return 0;
  arg7 = resultWrapper7;
  
  result = (SW_ErrCode)SW_SubmitExit(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg7, resultWrapper7.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitDraftAmendment(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jobjectArray jarg7) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_DealVersionHandle *arg7 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper7 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg7))
  return 0;
  arg7 = resultWrapper7;
  
  result = (SW_ErrCode)SW_SubmitDraftAmendment(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg7, resultWrapper7.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitUnderlying(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jobjectArray jarg7) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_DealVersionHandle *arg7 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper7 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg7))
  return 0;
  arg7 = resultWrapper7;
  
  result = (SW_ErrCode)SW_SubmitUnderlying(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg7, resultWrapper7.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitPrimeBrokerAmendment(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jobjectArray jarg7) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_DealVersionHandle *arg7 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper7 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg7))
  return 0;
  arg7 = resultWrapper7;
  
  result = (SW_ErrCode)SW_SubmitPrimeBrokerAmendment(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg7, resultWrapper7.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitNovation(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jobjectArray jarg7) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_DealVersionHandle *arg7 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper7 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg7))
  return 0;
  arg7 = resultWrapper7;
  
  result = (SW_ErrCode)SW_SubmitNovation(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg7, resultWrapper7.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitDraftNovation(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jobjectArray jarg7) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_DealVersionHandle *arg7 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper7 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg7))
  return 0;
  arg7 = resultWrapper7;
  
  result = (SW_ErrCode)SW_SubmitDraftNovation(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg7, resultWrapper7.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealAmendDraft(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jobjectArray jarg7) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_DealVersionHandle *arg7 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper7 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg7))
  return 0;
  arg7 = resultWrapper7;
  
  result = (SW_ErrCode)SW_DealAmendDraft(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg7, resultWrapper7.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealAmendDraftPrimeBroker(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jobjectArray jarg7) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  SW_XML arg5 = (SW_XML) 0 ;
  char *arg6 = (char *) 0 ;
  SW_DealVersionHandle *arg7 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper7 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg7))
  return 0;
  arg7 = resultWrapper7;
  
  result = (SW_ErrCode)SW_DealAmendDraftPrimeBroker(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg7, resultWrapper7.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealDispute(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_DealVersionHandle *arg4 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealDispute(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealSendChatMessage(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  char *arg3 = (char *) 0 ;
  SW_DealVersionHandle *arg4 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealSendChatMessage(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealPickup(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_DealVersionHandle *arg4 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealPickup(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealAccept(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_DealVersionHandle *arg4 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealAccept(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealAcceptAffirm(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_DealVersionHandle *arg4 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealAcceptAffirm(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealRelease(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_DealVersionHandle *arg4 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealRelease(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealRejectDK(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  char *arg3 = (char *) 0 ;
  SW_DealVersionHandle *arg4 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealRejectDK(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealRequestRevision(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  char *arg3 = (char *) 0 ;
  SW_DealVersionHandle *arg4 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealRequestRevision(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealReject(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  char *arg3 = (char *) 0 ;
  SW_DealVersionHandle *arg4 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealReject(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealTransfer(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  char *arg5 = (char *) 0 ;
  SW_DealVersionHandle *arg6 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_DealTransfer(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealWithdraw(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  SW_DealVersionHandle *arg3 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_DealWithdraw(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealAcknowledge(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_DealVersionHandle *arg3 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_DealAcknowledge(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealPull(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_DealVersionHandle *arg3 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_DealPull(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealContinueWithNoPrimeBroker(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_DealVersionHandle *arg3 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_DealContinueWithNoPrimeBroker(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealDeleteDraft(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_DealVersionHandle *arg3 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_DealDeleteDraft(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1MatchDelete(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_DealVersionHandle *arg3 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_MatchDelete(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealStateStr(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  enum SW_DealState arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum SW_DealState)jarg1; 
  result = (char *)SW_DealStateStr(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1QueryDefaultMisMatch(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_QueryDefaultMisMatch(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealGetSWML(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  SW_DealVersionHandle arg3 = (SW_DealVersionHandle) 0 ;
  SW_XML *arg4 = (SW_XML *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealGetSWML(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealGetSWDML(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  SW_DealVersionHandle arg3 = (SW_DealVersionHandle) 0 ;
  SW_XML *arg4 = (SW_XML *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealGetSWDML(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealGetUnderlyingDealSWDML(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  SW_DealVersionHandle arg3 = (SW_DealVersionHandle) 0 ;
  SW_XML *arg4 = (SW_XML *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealGetUnderlyingDealSWDML(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetSWDMLfromSWML(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_GetSWDMLfromSWML(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetLongFromShortSWDMLEx(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jobjectArray jarg5) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  char *arg4 = (char *) 0 ;
  SW_XML *arg5 = (SW_XML *) 0 ;
  MWString resultWrapper5 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg5))
  return 0;
  arg5 = resultWrapper5;
  
  result = (SW_ErrCode)SW_GetLongFromShortSWDMLEx(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const **)arg5);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg5, resultWrapper5.c_str))
  return 0;
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1CSVToXML(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jobjectArray jarg7) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  SW_XML *arg7 = (SW_XML *) 0 ;
  MWString resultWrapper7 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg7))
  return 0;
  arg7 = resultWrapper7;
  
  result = (SW_ErrCode)SW_CSVToXML(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg7, resultWrapper7.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1CSVGetColumn(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char **arg6 = (char **) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_CSVGetColumn(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1CSVSetColumn(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jobjectArray jarg7) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char **arg7 = (char **) 0 ;
  MWString resultWrapper7 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  UTF8Ref cleanup_arg6(jenv);
  if (!cleanup_arg6 .assign(jarg6, & arg6)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg7))
  return 0;
  arg7 = resultWrapper7;
  
  result = (SW_ErrCode)SW_CSVSetColumn(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg7, resultWrapper7.c_str))
  return 0;
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealGetVersionHandle(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jint jarg3, jint jarg4, jint jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealID arg2 ;
  SW_DealMajorVersion arg3 ;
  SW_DealPrivateVersion arg4 ;
  SW_DealSide arg5 ;
  SW_DealVersionHandle *arg6 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  arg2 = (SW_DealID)jarg2; 
  arg3 = (SW_DealMajorVersion)jarg3; 
  arg4 = (SW_DealPrivateVersion)jarg4; 
  arg5 = (SW_DealSide)jarg5; 
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_DealGetVersionHandle(arg1,arg2,arg3,arg4,arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealGetAllVersionHandles(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jint jarg3, jint jarg4, jobjectArray jarg5) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealID arg2 ;
  SW_DealMajorVersion arg3 ;
  SW_DealSide arg4 ;
  SW_DealVersionHandles *arg5 = (SW_DealVersionHandles *) 0 ;
  MWString resultWrapper5 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  arg2 = (SW_DealID)jarg2; 
  arg3 = (SW_DealMajorVersion)jarg3; 
  arg4 = (SW_DealSide)jarg4; 
  
  if (!CheckStringOutputArray(jenv, jarg5))
  return 0;
  arg5 = resultWrapper5;
  
  result = (SW_ErrCode)SW_DealGetAllVersionHandles(arg1,arg2,arg3,arg4,(char const **)arg5);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg5, resultWrapper5.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealGetIDVersionsAndSide(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlongArray jarg3, jintArray jarg4, jintArray jarg5, jintArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_DealID *arg3 = (SW_DealID *) 0 ;
  SW_DealMajorVersion *arg4 = (SW_DealMajorVersion *) 0 ;
  SW_DealPrivateVersion *arg5 = (SW_DealPrivateVersion *) 0 ;
  SW_DealSide *arg6 = (SW_DealSide *) 0 ;
  SW_DealID temp3 ;
  SW_DealMajorVersion temp4 ;
  SW_DealPrivateVersion temp5 ;
  SW_DealSide temp6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (SW_DealID)0;
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp4 = (SW_DealMajorVersion)0;
    arg4 = &temp4; 
  }
  {
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg5) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp5 = (SW_DealPrivateVersion)0;
    arg5 = &temp5; 
  }
  {
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg6) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp6 = (SW_DealSide)0;
    arg6 = &temp6; 
  }
  result = (SW_ErrCode)SW_DealGetIDVersionsAndSide(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    jlong jvalue = (jlong)temp3;
    jenv->SetLongArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp4;
    jenv->SetIntArrayRegion(jarg4, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp5;
    jenv->SetIntArrayRegion(jarg5, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp6;
    jenv->SetIntArrayRegion(jarg6, 0, 1, &jvalue);
  }
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealGetMySide(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jint jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealID arg2 ;
  SW_DealMajorVersion arg3 ;
  SW_DealSide *arg4 = (SW_DealSide *) 0 ;
  SW_DealSide temp4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  arg2 = (SW_DealID)jarg2; 
  arg3 = (SW_DealMajorVersion)jarg3; 
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp4 = (SW_DealSide)0;
    arg4 = &temp4; 
  }
  result = (SW_ErrCode)SW_DealGetMySide(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp4;
    jenv->SetIntArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealGetDealState(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jintArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  enum SW_DealState *arg3 = (enum SW_DealState *) 0 ;
  enum SW_DealState temp3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (enum SW_DealState)0;
    arg3 = &temp3; 
  }
  result = (SW_ErrCode)SW_DealGetDealState(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetActiveDealInfo(JNIEnv *jenv, jclass jcls, jint jarg1, jobjectArray jarg2) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML *arg2 = (SW_XML *) 0 ;
  MWString resultWrapper2 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  if (!CheckStringOutputArray(jenv, jarg2))
  return 0;
  arg2 = resultWrapper2;
  
  result = (SW_ErrCode)SW_GetActiveDealInfo(arg1,(char const **)arg2);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg2, resultWrapper2.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetParticipants(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_GetParticipants(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetLegalEntities(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_GetLegalEntities(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetMyInterestGroups(JNIEnv *jenv, jclass jcls, jint jarg1, jobjectArray jarg2) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML *arg2 = (SW_XML *) 0 ;
  MWString resultWrapper2 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  if (!CheckStringOutputArray(jenv, jarg2))
  return 0;
  arg2 = resultWrapper2;
  
  result = (SW_ErrCode)SW_GetMyInterestGroups(arg1,(char const **)arg2);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg2, resultWrapper2.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SetMyInterestGroups(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  result = (SW_ErrCode)SW_SetMyInterestGroups(arg1,(char const *)arg2);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetMyBooks(JNIEnv *jenv, jclass jcls, jint jarg1, jobjectArray jarg2) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML *arg2 = (SW_XML *) 0 ;
  MWString resultWrapper2 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  if (!CheckStringOutputArray(jenv, jarg2))
  return 0;
  arg2 = resultWrapper2;
  
  result = (SW_ErrCode)SW_GetMyBooks(arg1,(char const **)arg2);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg2, resultWrapper2.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealAffirm(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  char *arg5 = (char *) 0 ;
  SW_DealVersionHandle *arg6 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_DealAffirm(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1MatchUpdate(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  char *arg5 = (char *) 0 ;
  SW_DealVersionHandle *arg6 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  UTF8Ref cleanup_arg5(jenv);
  if (!cleanup_arg5 .assign(jarg5, & arg5)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_MatchUpdate(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SubmitValuationReport(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  result = (SW_ErrCode)SW_SubmitValuationReport(arg1,(char const *)arg2);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1RequestValuationReport(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_TimeSpan arg2 ;
  char **arg3 = (char **) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  arg2 = (SW_TimeSpan)jarg2; 
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_RequestValuationReport(arg1,arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealGetPrivateBookingState(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jint jarg3, jint jarg4, jobjectArray jarg5) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealID arg2 ;
  SW_DealMajorVersion arg3 ;
  SW_DealSide arg4 ;
  char **arg5 = (char **) 0 ;
  MWString resultWrapper5 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  arg2 = (SW_DealID)jarg2; 
  arg3 = (SW_DealMajorVersion)jarg3; 
  arg4 = (SW_DealSide)jarg4; 
  
  if (!CheckStringOutputArray(jenv, jarg5))
  return 0;
  arg5 = resultWrapper5;
  
  result = (SW_ErrCode)SW_DealGetPrivateBookingState(arg1,arg2,arg3,arg4,(char const **)arg5);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg5, resultWrapper5.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealGetXML(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jobjectArray jarg5) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  SW_XML *arg5 = (SW_XML *) 0 ;
  MWString resultWrapper5 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg5))
  return 0;
  arg5 = resultWrapper5;
  
  result = (SW_ErrCode)SW_DealGetXML(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const **)arg5);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg5, resultWrapper5.c_str))
  return 0;
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealUpdate(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  SW_DealUpdateResult *arg4 = (SW_DealUpdateResult *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealUpdate(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealCheckEligibility(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  char *arg3 = (char *) 0 ;
  SW_XML *arg4 = (SW_XML *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealCheckEligibility(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1BatchGetOutstanding(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_BatchGetOutstanding(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1BatchGetDetails(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  int arg2 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  arg2 = (int)jarg2; 
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_BatchGetDetails(arg1,arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1BatchAck(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  int arg2 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  arg2 = (int)jarg2; 
  result = (SW_ErrCode)SW_BatchAck(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1BatchUpdate(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_BatchUpdate(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealSinkGetSWML(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3, jint jarg4, jint jarg5, jobjectArray jarg6) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  SW_DealID arg3 ;
  SW_DealMajorVersion arg4 ;
  SW_DealSide arg5 ;
  SW_XML *arg6 = (SW_XML *) 0 ;
  MWString resultWrapper6 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  arg3 = (SW_DealID)jarg3; 
  arg4 = (SW_DealMajorVersion)jarg4; 
  arg5 = (SW_DealSide)jarg5; 
  
  if (!CheckStringOutputArray(jenv, jarg6))
  return 0;
  arg6 = resultWrapper6;
  
  result = (SW_ErrCode)SW_DealSinkGetSWML(arg1,(char const *)arg2,arg3,arg4,arg5,(char const **)arg6);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg6, resultWrapper6.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealSinkDVHGetSWML(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  SW_DealVersionHandle arg3 = (SW_DealVersionHandle) 0 ;
  SW_XML *arg4 = (SW_XML *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealSinkDVHGetSWML(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1QueryDeals(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3, jobject jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  void *arg4 = (void *) 0 ;
  PDSQUERYHANDLER arg5 = (PDSQUERYHANDLER) 0 ;
  MWString resultWrapper3 ;
  jstring returnedStatusString3 ;
  jthrowable exc3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (jarg4 != 0)
  {
    arg3 = 0;
  }
  else if (!CheckStringOutputArray(jenv, jarg3))
  {
    return 0;
  }
  else
  {
    arg3 = resultWrapper3;
  }
  
  {
    if (jarg4 == 0)
    {
      arg5 = 0;
      arg4 = 0;
    }
    else
    {
      if (!CreateQueryCallback(jenv, jarg4, &arg4))
      return 0;
      arg5 = queryHandlerCallbackInterposer;
    }
  }
  result = (SW_ErrCode)SW_QueryDeals(arg1,(char const *)arg2,(char const **)arg3,arg4,arg5);
  jresult = (jint)result; 
  
  if (!jarg4 && result == SWERR_Success &&
    !SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1ExtractGetColumns(JNIEnv *jenv, jclass jcls, jint jarg1, jobjectArray jarg2) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char **arg2 = (char **) 0 ;
  MWString resultWrapper2 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  if (!CheckStringOutputArray(jenv, jarg2))
  return 0;
  arg2 = resultWrapper2;
  
  result = (SW_ErrCode)SW_ExtractGetColumns(arg1,(char const **)arg2);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg2, resultWrapper2.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealGetReportingStatus(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  long long arg3 ;
  char **arg4 = (char **) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  arg3 = (long long)jarg3; 
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealGetReportingStatus(arg1,(char const *)arg2,arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealSetReportingStatus(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  long long arg3 ;
  SW_XML *arg4 = (SW_XML *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  arg3 = (long long)jarg3; 
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealSetReportingStatus(arg1,(char const *)arg2,arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealAllowDeClearingEx(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_DealAllowDeClearingEx(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetLibraryVersion(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  result = (SW_ErrCode)SW_GetLibraryVersion();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetLibraryVersionEx(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jint jresult = 0 ;
  char **arg1 = (char **) 0 ;
  MWString resultWrapper1 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  
  if (!CheckStringOutputArray(jenv, jarg1))
  return 0;
  arg1 = resultWrapper1;
  
  result = (SW_ErrCode)SW_GetLibraryVersionEx((char const **)arg1);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg1, resultWrapper1.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1ValidateXML(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  char **arg3 = (char **) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_ValidateXML(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1TransformXML(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jobjectArray jarg5) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  SW_XML arg4 = (SW_XML) 0 ;
  char **arg5 = (char **) 0 ;
  MWString resultWrapper5 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg5))
  return 0;
  arg5 = resultWrapper5;
  
  result = (SW_ErrCode)SW_TransformXML(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const **)arg5);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg5, resultWrapper5.c_str))
  return 0;
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1SendTelemetry(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML arg2 = (SW_XML) 0 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_SendTelemetry(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealTransferAffirm(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_DealVersionHandle *arg3 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_DealTransferAffirm(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealCompare(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_DealVersionHandle arg3 = (SW_DealVersionHandle) 0 ;
  SW_XML *arg4 = (SW_XML *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealCompare(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealCompareClosestMatch(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_DealCompareClosestMatch(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealGetMatchInfo(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML *arg3 = (SW_XML *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_DealGetMatchInfo(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GetMatchInfo(JNIEnv *jenv, jclass jcls, jint jarg1, jobjectArray jarg2) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_XML *arg2 = (SW_XML *) 0 ;
  MWString resultWrapper2 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  if (!CheckStringOutputArray(jenv, jarg2))
  return 0;
  arg2 = resultWrapper2;
  
  result = (SW_ErrCode)SW_GetMatchInfo(arg1,(char const **)arg2);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg2, resultWrapper2.c_str))
  return 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealSuggestMatch(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_DealVersionHandle arg3 = (SW_DealVersionHandle) 0 ;
  SW_DealVersionHandle *arg4 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealSuggestMatch(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealWithdrawSuggestMatch(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_DealVersionHandle arg3 = (SW_DealVersionHandle) 0 ;
  SW_DealVersionHandle *arg4 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper4 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg4))
  return 0;
  arg4 = resultWrapper4;
  
  result = (SW_ErrCode)SW_DealWithdrawSuggestMatch(arg1,(char const *)arg2,(char const *)arg3,(char const **)arg4);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg4, resultWrapper4.c_str))
  return 0;
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1MatchPush(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_DealVersionHandle *arg3 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_MatchPush(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1MatchPull(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jobjectArray jarg3) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_DealVersionHandle *arg3 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper3 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg3))
  return 0;
  arg3 = resultWrapper3;
  
  result = (SW_ErrCode)SW_MatchPull(arg1,(char const *)arg2,(char const **)arg3);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg3, resultWrapper3.c_str))
  return 0;
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1GateCheckDispute(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jobjectArray jarg5) {
  jint jresult = 0 ;
  SW_LoginID arg1 ;
  SW_DealVersionHandle arg2 = (SW_DealVersionHandle) 0 ;
  SW_XML arg3 = (SW_XML) 0 ;
  char *arg4 = (char *) 0 ;
  SW_DealVersionHandle *arg5 = (SW_DealVersionHandle *) 0 ;
  MWString resultWrapper5 ;
  SW_ErrCode result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SW_LoginID)jarg1; 
  
  UTF8Ref cleanup_arg2(jenv);
  if (!cleanup_arg2 .assign(jarg2, & arg2)) return 0;
  
  
  UTF8Ref cleanup_arg3(jenv);
  if (!cleanup_arg3 .assign(jarg3, & arg3)) return 0;
  
  
  UTF8Ref cleanup_arg4(jenv);
  if (!cleanup_arg4 .assign(jarg4, & arg4)) return 0;
  
  
  if (!CheckStringOutputArray(jenv, jarg5))
  return 0;
  arg5 = resultWrapper5;
  
  result = (SW_ErrCode)SW_GateCheckDispute(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const **)arg5);
  jresult = (jint)result; 
  
  if (!SetStringReturnValue(jenv, jarg5, resultWrapper5.c_str))
  return 0;
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1lh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  SW_LoginID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (SW_LoginID) ((arg1)->lh);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1clientData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (void *) ((arg1)->clientData);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1brokerId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  SW_BrokerDealID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (SW_BrokerDealID) ((arg1)->brokerId);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1dealId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  SW_DealID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (SW_DealID) ((arg1)->dealId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1majorVer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  SW_DealMajorVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (SW_DealMajorVersion) ((arg1)->majorVer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1minorVer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  SW_DealMinorVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (SW_DealMinorVersion) ((arg1)->minorVer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1privateVer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  SW_DealPrivateVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (SW_DealPrivateVersion) ((arg1)->privateVer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1side_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  SW_DealSide result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (SW_DealSide) ((arg1)->side);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1prevDVH_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  SW_DealVersionHandle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (SW_DealVersionHandle) ((arg1)->prevDVH);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1dvh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  SW_DealVersionHandle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (SW_DealVersionHandle) ((arg1)->dvh);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1newState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  enum SW_DealState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (enum SW_DealState) ((arg1)->newState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1newStateStr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (char *) ((arg1)->newStateStr);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1contractState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (char *) ((arg1)->contractState);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1productType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (char *) ((arg1)->productType);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_swapswire_sw_1api_SWAPILink_SW_1DealNotifyData_1tradeAttrFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SW_DealNotifyData *arg1 = (SW_DealNotifyData *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SW_DealNotifyData **)&jarg1; 
  result = (unsigned int) ((arg1)->tradeAttrFlags);
  jresult = (jlong)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

