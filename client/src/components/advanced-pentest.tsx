import { useState } from "react";
import { useMutation, useQuery } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  XCircle, 
  Loader2, 
  Bug, 
  Database, 
  Code, 
  Key,
  Zap,
  FileText,
  Target
} from "lucide-react";

interface ConnectionSettings {
  host: string;
  username: string;
  password: string;
}

interface PentestResult {
  success: boolean;
  response: string;
  vulnerabilityDetected: boolean;
  vulnerabilityType?: string;
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  details: any;
}

interface AdvancedPentestProps {
  connectionSettings: ConnectionSettings;
}

export function AdvancedPentest({ connectionSettings }: AdvancedPentestProps) {
  const [selectedTestType, setSelectedTestType] = useState<string>("");
  const [selectedCommand, setSelectedCommand] = useState("");
  const [customPayload, setCustomPayload] = useState("");
  const [autoTestRunning, setAutoTestRunning] = useState(false);
  const [testResults, setTestResults] = useState<PentestResult[]>([]);
  const [selectedPayloads, setSelectedPayloads] = useState<string[]>([]);

  // Get available payloads for test type
  const { data: payloadsData } = useQuery({
    queryKey: ["/api/payloads", selectedTestType],
    enabled: !!selectedTestType
  });

  // Execute penetration test
  const pentestMutation = useMutation({
    mutationFn: async (payload: any) => {
      const response = await apiRequest("/api/markitwire/pentest", {
        method: "POST",
        body: payload
      });
      return response;
    },
    onSuccess: (data: any) => {
      setTestResults(prev => [...prev, data]);
    }
  });

  const testTypes = [
    { 
      value: "sql_injection", 
      label: "SQL Injection", 
      icon: Database,
      description: "Test for SQL injection vulnerabilities in API parameters"
    },
    { 
      value: "xss", 
      label: "Cross-Site Scripting", 
      icon: Code,
      description: "Test for XSS vulnerabilities in input fields"
    },
    { 
      value: "buffer_overflow", 
      label: "Buffer Overflow", 
      icon: Bug,
      description: "Test for buffer overflow vulnerabilities with large payloads"
    },
    { 
      value: "auth_bypass", 
      label: "Authentication Bypass", 
      icon: Key,
      description: "Test for authentication and authorization bypass vulnerabilities"
    },
    { 
      value: "parameter_pollution", 
      label: "Parameter Pollution", 
      icon: Zap,
      description: "Test for HTTP parameter pollution vulnerabilities"
    }
  ];

  const availableCommands = [
    "GetUserInfoCmd",
    "GetBookListCmd", 
    "GetLegalEntityListCmd",
    "GetParticipantsCmd",
    "QueryDealsCmd",
    "GetDealInfoCmd",
    "SubmitDealCmd",
    "AcceptCmd",
    "AffirmCmd"
  ];

  const handleSingleTest = async () => {
    if (!selectedTestType || !selectedCommand) return;

    const payload = customPayload ? { custom: customPayload } : { 
      field: "testField", 
      value: selectedPayloads[0] || "test" 
    };

    pentestMutation.mutate({
      ...connectionSettings,
      command: selectedCommand,
      payload,
      testType: selectedTestType
    });
  };

  const handleAutomatedTest = async () => {
    if (!selectedTestType || !selectedCommand) return;
    
    setAutoTestRunning(true);
    setTestResults([]);

    try {
      const payloads = (payloadsData as any)?.payloads || [];
      
      for (let i = 0; i < payloads.length; i++) {
        const payload = {
          field: "testField",
          value: payloads[i]
        };

        await pentestMutation.mutateAsync({
          ...connectionSettings,
          command: selectedCommand,
          payload,
          testType: selectedTestType
        });

        // Add delay between tests
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    } catch (error) {
      console.error("Automated test failed:", error);
    } finally {
      setAutoTestRunning(false);
    }
  };

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'critical': return 'text-red-600';
      case 'high': return 'text-orange-600';
      case 'medium': return 'text-yellow-600';
      case 'low': return 'text-green-600';
      default: return 'text-gray-600';
    }
  };

  const getRiskBadgeVariant = (risk: string) => {
    switch (risk) {
      case 'critical': return 'destructive';
      case 'high': return 'destructive';
      case 'medium': return 'default';
      case 'low': return 'secondary';
      default: return 'outline';
    }
  };

  const vulnerabilityCount = testResults.filter(r => r.vulnerabilityDetected).length;
  const totalTests = testResults.length;

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            Advanced Penetration Testing
          </CardTitle>
          <CardDescription>
            Comprehensive security testing against MarkitWire APIs using real payloads and vulnerability detection
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Test Configuration */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>Test Type</Label>
              <Select value={selectedTestType} onValueChange={setSelectedTestType}>
                <SelectTrigger>
                  <SelectValue placeholder="Select vulnerability test type" />
                </SelectTrigger>
                <SelectContent>
                  {testTypes.map((type) => (
                    <SelectItem key={type.value} value={type.value}>
                      <div className="flex items-center gap-2">
                        <type.icon className="h-4 w-4" />
                        {type.label}
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {selectedTestType && (
                <p className="text-sm text-muted-foreground">
                  {testTypes.find(t => t.value === selectedTestType)?.description}
                </p>
              )}
            </div>

            <div className="space-y-2">
              <Label>Target Command</Label>
              <Select value={selectedCommand} onValueChange={setSelectedCommand}>
                <SelectTrigger>
                  <SelectValue placeholder="Select API command to test" />
                </SelectTrigger>
                <SelectContent>
                  {availableCommands.map((cmd) => (
                    <SelectItem key={cmd} value={cmd}>
                      {cmd}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Payload Selection */}
          {payloadsData && (
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Available Payloads</CardTitle>
                <CardDescription>
                  Select payloads to use in your penetration test
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 gap-2 max-h-48 overflow-y-auto">
                  {((payloadsData as any)?.payloads || []).map((payload: string, index: number) => (
                    <div key={index} className="flex items-center space-x-2">
                      <Checkbox
                        id={`payload-${index}`}
                        checked={selectedPayloads.includes(payload)}
                        onCheckedChange={(checked) => {
                          if (checked) {
                            setSelectedPayloads([...selectedPayloads, payload]);
                          } else {
                            setSelectedPayloads(selectedPayloads.filter(p => p !== payload));
                          }
                        }}
                      />
                      <Label 
                        htmlFor={`payload-${index}`} 
                        className="text-sm font-mono flex-1 cursor-pointer"
                      >
                        {payload.length > 100 ? `${payload.substring(0, 100)}...` : payload}
                      </Label>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Custom Payload */}
          <div className="space-y-2">
            <Label htmlFor="custom-payload">Custom Payload (Optional)</Label>
            <Textarea
              id="custom-payload"
              value={customPayload}
              onChange={(e) => setCustomPayload(e.target.value)}
              placeholder="Enter custom payload for testing..."
              className="font-mono"
              rows={3}
            />
          </div>

          {/* Test Actions */}
          <div className="flex gap-2">
            <Button 
              onClick={handleSingleTest}
              disabled={!selectedTestType || !selectedCommand || pentestMutation.isPending}
              variant="outline"
            >
              {pentestMutation.isPending ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Testing...
                </>
              ) : (
                <>
                  <Target className="mr-2 h-4 w-4" />
                  Single Test
                </>
              )}
            </Button>

            <Button 
              onClick={handleAutomatedTest}
              disabled={!selectedTestType || !selectedCommand || autoTestRunning || !payloadsData}
            >
              {autoTestRunning ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Running Automated Tests...
                </>
              ) : (
                <>
                  <Zap className="mr-2 h-4 w-4" />
                  Automated Test Suite
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Test Results Summary */}
      {testResults.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              Test Results Summary
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div className="text-center">
                <div className="text-2xl font-bold">{totalTests}</div>
                <div className="text-sm text-muted-foreground">Total Tests</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-red-600">{vulnerabilityCount}</div>
                <div className="text-sm text-muted-foreground">Vulnerabilities</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{totalTests - vulnerabilityCount}</div>
                <div className="text-sm text-muted-foreground">Safe Tests</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold">
                  {totalTests > 0 ? Math.round((vulnerabilityCount / totalTests) * 100) : 0}%
                </div>
                <div className="text-sm text-muted-foreground">Risk Rate</div>
              </div>
            </div>

            {autoTestRunning && (
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Progress</span>
                  <span>{testResults.length} / {payloadsData?.payloads?.length || 0}</span>
                </div>
                <Progress 
                  value={(testResults.length / (payloadsData?.payloads?.length || 1)) * 100} 
                  className="w-full"
                />
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Detailed Results */}
      {testResults.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Detailed Test Results</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {testResults.map((result, index) => (
                <Card key={index} className={`border-l-4 ${
                  result.vulnerabilityDetected ? 'border-l-red-500' : 'border-l-green-500'
                }`}>
                  <CardContent className="pt-4">
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex items-center gap-2">
                        {result.vulnerabilityDetected ? (
                          <AlertTriangle className="h-4 w-4 text-red-500" />
                        ) : (
                          <CheckCircle className="h-4 w-4 text-green-500" />
                        )}
                        <span className="font-medium">
                          Test #{index + 1}
                        </span>
                        {result.vulnerabilityDetected && (
                          <Badge variant={getRiskBadgeVariant(result.riskLevel)}>
                            {result.riskLevel.toUpperCase()}
                          </Badge>
                        )}
                      </div>
                      <Badge variant="outline">
                        {result.vulnerabilityType || "No Vulnerability"}
                      </Badge>
                    </div>

                    {result.vulnerabilityDetected && (
                      <Alert className="mb-3">
                        <AlertTriangle className="h-4 w-4" />
                        <AlertDescription>
                          <strong>Vulnerability Detected:</strong> {result.vulnerabilityType}
                          <br />
                          <strong>Risk Level:</strong> <span className={getRiskColor(result.riskLevel)}>
                            {result.riskLevel.toUpperCase()}
                          </span>
                        </AlertDescription>
                      </Alert>
                    )}

                    <div className="text-sm">
                      <Label className="font-medium">Response Preview:</Label>
                      <div className="mt-1 p-2 bg-muted rounded font-mono text-xs">
                        {result.response.substring(0, 200)}
                        {result.response.length > 200 && "..."}
                      </div>
                    </div>

                    {result.details && (
                      <details className="mt-2">
                        <summary className="cursor-pointer text-sm font-medium">
                          View Technical Details
                        </summary>
                        <pre className="mt-2 p-2 bg-muted rounded text-xs overflow-x-auto">
                          {JSON.stringify(result.details, null, 2)}
                        </pre>
                      </details>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}